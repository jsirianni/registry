---
apiVersion: v1
kind: Namespace
metadata:
  name: {{.Env.NAMESPACE}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  namespace: {{.Env.NAMESPACE}}
  labels:
    app: registry
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
  selector:
    matchLabels:
      app: registry
  template:
    metadata:
      labels:
        app: registry
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:  [registry]
      containers:
      - name: registry
        image: {{.Env.IMAGE_TAG}}
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: REGISTRY_CONFIG_SECRET_KEY
          value: {{.Env.REGISTRY_CONFIG_SECRET_KEY}}
        - name: REGISTRY_CONFIG_STORAGE_TYPE
          value: {{.Env.REGISTRY_CONFIG_STORAGE_TYPE}}
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
          limits:
            cpu: 20m
            memory: 30Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: registry
  namespace: {{.Env.NAMESPACE}}
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: registry
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 70
---
apiVersion: v1
kind: Service
metadata:
  name: registry
  namespace: {{.Env.NAMESPACE}}
  labels:
    app: registry
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
  selector:
    app: registry
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: registry
  namespace: {{.Env.NAMESPACE}}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    cert-manager.io/cluster-issuer: {{.Env.INGRESS_CLUSTER_ISSUER}}
spec:
  tls:
  - hosts:
    - {{.Env.INGRESS_HOSTNAME}}
    secretName: registry-tls
  rules:
  - host: {{.Env.INGRESS_HOSTNAME}}
    http:
      paths:
      - backend:
          service:
            name: registry
            port:
              number: 8080
        path: /
        pathType: Prefix
